{"version":3,"sources":["components/HTMLDisplay.js","components/HTMLEditor.js","components/CSSEditor.js","components/EditorContainer.js","App.js","serviceWorker.js","index.js"],"names":["HTMLDisplay","props","StyledDiv","dangerouslySetInnerHTML","__html","HTML","HTMLEditor","rows","cols","onChange","HTMLChange","defaultValue","CSSEditor","CSSChange","CSS","EditorContainer","App","useState","showHTML","setShowHTML","showCSS","setShowCSS","Styled","div","e","target","value","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qQAMeA,MAJf,SAAqBC,GACnB,OAAO,kBAACA,EAAMC,UAAP,CAAiBC,wBAAyB,CAAEC,OAAQH,EAAMI,SCapDC,MAdf,SAAoBL,GAClB,OACE,8BACE,2CACA,8BACEM,KAAK,KACLC,KAAK,MACLC,SAAUR,EAAMS,WAChBC,aAAcV,EAAMI,SCMbO,MAdf,SAAmBX,GACjB,OACE,8BACE,0CACA,8BACEM,KAAK,KACLC,KAAK,MACLC,SAAUR,EAAMY,UAChBF,aAAcV,EAAMa,QCGbC,MATf,SAAyBd,GACvB,OACE,oCACE,kBAAC,EAAD,CAAYI,KAAMJ,EAAMI,KAAMK,WAAYT,EAAMS,aAChD,kBAAC,EAAD,CAAWI,IAAKb,EAAMa,IAAKD,UAAWZ,EAAMY,c,wFC6BnCG,MA/Bf,WAAgB,IAAD,EACmBC,mBAC9B,iRAFW,mBACNC,EADM,KACIC,EADJ,OAIiBF,mBAAS,sBAJ1B,mBAING,EAJM,KAIGC,EAJH,KAMPnB,EAAYoB,IAAOC,IAAV,IACXH,GAWJ,OACE,oCACE,kBAAC,EAAD,CAAaf,KAAMa,EAAUhB,UAAWA,IACxC,kBAAC,EAAD,CACEG,KAAMa,EACNJ,IAAKM,EACLV,WAda,SAACc,GAClBL,EAAYK,EAAEC,OAAOC,QAcjBb,UAXY,SAACW,GACjBH,EAAWG,EAAEC,OAAOC,YCTJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.74fd24e0.chunk.js","sourcesContent":["import React from 'react';\n\nfunction HTMLDisplay(props) {\n  return <props.StyledDiv dangerouslySetInnerHTML={{ __html: props.HTML }} />;\n}\n\nexport default HTMLDisplay;\n","import React from 'react';\n\nfunction HTMLEditor(props) {\n  return (\n    <form>\n      <h4>HTML Editor</h4>\n      <textarea\n        rows=\"30\"\n        cols=\"100\"\n        onChange={props.HTMLChange}\n        defaultValue={props.HTML}\n      />\n    </form>\n  );\n}\n\nexport default HTMLEditor;\n","import React from 'react';\n\nfunction CSSEditor(props) {\n  return (\n    <form>\n      <h4>CSS Editor</h4>\n      <textarea\n        rows=\"30\"\n        cols=\"100\"\n        onChange={props.CSSChange}\n        defaultValue={props.CSS}\n      />\n    </form>\n  );\n}\n\nexport default CSSEditor;\n","import React from 'react';\nimport HTMLEditor from './HTMLEditor';\nimport CSSEditor from './CSSEditor';\n\nfunction EditorContainer(props) {\n  return (\n    <>\n      <HTMLEditor HTML={props.HTML} HTMLChange={props.HTMLChange} />\n      <CSSEditor CSS={props.CSS} CSSChange={props.CSSChange} />\n    </>\n  );\n}\n\nexport default EditorContainer;\n","import React, { useState } from 'react';\nimport Styled from 'styled-components';\nimport HTMLDisplay from './components/HTMLDisplay';\nimport EditorContainer from './components/EditorContainer';\nimport './App.css';\n\nfunction App() {\n  const [showHTML, setShowHTML] = useState(\n    '<h1>This is a title</h1> \\n\\n<p>Here is a short paragraph about nothing. I\\'ll have you know I\\'m also a <a href=\"http://markdelmar.com\" target=\"_blank\">photographer</a> but got <b>really bored</b> with it. Try editing this <span>span tag</span> for maximum effort!</p>'\n  );\n  const [showCSS, setShowCSS] = useState('h1 { color: red; }');\n\n  const StyledDiv = Styled.div`\n    ${showCSS}\n  `;\n\n  const HTMLChange = (e) => {\n    setShowHTML(e.target.value);\n  };\n\n  const CSSChange = (e) => {\n    setShowCSS(e.target.value);\n  };\n\n  return (\n    <>\n      <HTMLDisplay HTML={showHTML} StyledDiv={StyledDiv} />\n      <EditorContainer\n        HTML={showHTML}\n        CSS={showCSS}\n        HTMLChange={HTMLChange}\n        CSSChange={CSSChange}\n      />\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}